
import 'dart:convert';                       
// 'dart:convert' nos permite:
// - Convertir un Map de Dart en un JSON string (jsonEncode)
// - Convertir un JSON string en un Map de Dart (jsonDecode)

import 'package:http/http.dart' as http;     
// Paquete oficial para hacer peticiones HTTP en Dart/Flutter.
// Lo renombramos como "http" para usarlo as√≠: http.post, http.get, etc.


// =============================
// Clase principal de servicio
// =============================
// Aqu√≠ se centralizan TODAS las llamadas al backend relacionadas
// con autenticaci√≥n y gesti√≥n del usuario.
// Es buena pr√°ctica mantener la l√≥gica de red separada de la UI.
class AuthService {

  // -------------------------------
  // URL base de la API
  // -------------------------------
  // ‚ö†Ô∏è IMPORTANTE: c√°mbiala por la direcci√≥n real de tu backend.
  // Ejemplo local: "http://127.0.0.1:8000/api"
  // Ejemplo en producci√≥n: "https://tuservidor.com/api"
  static const String baseUrl = "http://-servidor.com/api";


  // =====================================================================
  // M√âTODO: Registrar usuario
  // =====================================================================
  Future<bool> registerUser({
    // Estos par√°metros son obligatorios porque usamos "required"
    required String nombre,
    required String apellido,
    required String fechaNacimiento,
    required String tipoDocumento,
    required String numeroDocumento,
    required String correo,
    required String telefono,
    required String password,
  }) async {

    // Construimos la URL final para registrar
    final url = Uri.parse("$baseUrl/register");

    try {
      // Hacemos la petici√≥n POST (crear recurso)
      final response = await http.post(
        url,
        headers: {
          "Content-Type": "application/json", // Indicamos que enviamos JSON
        },
        body: jsonEncode({  // Convertimos los datos a JSON
          "nombre": nombre,
          "apellido": apellido,
          "fecha_nacimiento": fechaNacimiento,
          "tipo_documento": tipoDocumento,
          "numero_documento": numeroDocumento,
          "correo": correo,
          "telefono": telefono,
          "password": password,
        }),
      );

      // Revisamos si el servidor respondi√≥ con √©xito
      if (response.statusCode == 200 || response.statusCode == 201) {
        // 200 = OK, 201 = Created
        return true;
      } else {
        // Si fue 400, 500, etc.
        return false;
      }
    } catch (e) {
      // Si ocurre un error de conexi√≥n o excepci√≥n
      return false;
    }
  }


  // =====================================================================
  // M√âTODO: Iniciar sesi√≥n
  // =====================================================================
  Future<bool> loginUser({
    required String correo,    
    required String password,  
  }) async {

    final url = Uri.parse("$baseUrl/login");

    try {
      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "correo": correo,
          "password": password,
        }),
      );

      if (response.statusCode == 200) {
        // Aqu√≠ podr√≠as guardar el token que env√≠a el servidor
        // usando SharedPreferences o SecureStorage.
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  }


  // =====================================================================
  // M√âTODO: Cerrar sesi√≥n
  // =====================================================================
  Future<bool> logoutUser({required String token}) async {
    final url = Uri.parse("$baseUrl/logout");

    try {
      final response = await http.post(
        url,
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer $token", // Enviamos token del usuario
        },
      );

      if (response.statusCode == 200) {
        // Aqu√≠ deber√≠as eliminar el token del dispositivo
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  }


  // =====================================================================
  // M√âTODO: Actualizar perfil de usuario
  // =====================================================================
  Future<bool> updateUser({
    required String token,          // Token del usuario autenticado
    required String nombre,
    required String apellido,
    required String fechaNacimiento,
    required String telefono,
    required String edad,
    required String enfermedad,
  }) async {
    
    // Construimos la URL para actualizar el perfil
    final url = Uri.parse("$baseUrl/update-profile"); 
    // ‚ö†Ô∏è Ajusta la ruta seg√∫n tu backend (/user/update o /profile/edit)

    try {
      // Hacemos una petici√≥n PUT (actualizaci√≥n de recurso existente)
      final response = await http.put(
        url,
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer $token", // ‚ö° Se requiere autenticaci√≥n
        },
        body: jsonEncode({
          "nombre": nombre,
          "apellido": apellido,
          "fecha_nacimiento": fechaNacimiento,
          "telefono": telefono,
          "edad": edad,
          "enfermedad": enfermedad,
        }),
      );

      // Revisamos la respuesta del servidor
      if (response.statusCode == 200) {
        return true;  // Perfil actualizado con √©xito
      } else {
        return false; // Error en el servidor (400, 500, etc.)
      }
    } catch (e) {
      // Si ocurre un error de conexi√≥n
      return false;
    }
  }

} // üëà Aqu√≠ cierra la clase AuthService





